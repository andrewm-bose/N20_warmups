-- For each country calculate the total spending for each customer, and 
-- include a column (called 'difference') showing how much more each customer 
-- spent compared to the next highest spender in that country. 
-- For the 'difference' column, fill any nulls with zero.
-- ROUND your all of your results to the next penny.

-- hints: 
-- keywords to google - lead, lag, coalesce
-- If rounding isn't working: 
-- https://stackoverflow.com/questions/13113096/how-to-round-an-average-to-2-decimal-places-in-postgresql/20934099

WITH order_info AS ( --first, get the basic necessary info together
SELECT *,
	od.unit_price as od_unit_price,--this isn't necessary, but avoids an 'ambiguous' error I was getting
	c.customer_id as c_customer_id--this isn't necessary, but avoids an 'ambiguous' error I was getting
FROM orders as o 
	JOIN order_details as od ON o.order_id = od.order_id
	JOIN products as p ON od.product_id = p.product_id
	JOIN customers as c ON o.customer_id = c.customer_id
),
customer_totals as ( --get customer totals
SELECT 
	c_customer_id,
	country,
	SUM(od_unit_price*quantity*(1-discount)) as total
FROM order_info
GROUP BY c_customer_id, country),
customer_totals_lags as ( --line up the total column with next highest spender
SELECT *,
	LAG(total,1) OVER(PARTITION BY country ORDER BY total) as previous
FROM customer_totals)
SELECT c_customer_id as customer_id, --calculate the differences
	country,
	ROUND(total::numeric,2) as total,
	ROUND(previous::numeric,2) as previous,
	ROUND(COALESCE(total-previous,0)::numeric,2) as difference --fill nulls with 0
FROM customer_totals_lags
ORDER BY country, total DESC;